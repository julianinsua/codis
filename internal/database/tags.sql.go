// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
	 name, user_id
) VALUES ( $1, $2 ) RETURNING id, name, user_id
`

type CreateTagParams struct {
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Name, arg.UserID)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getTagById = `-- name: GetTagById :one
SELECT id, name, user_id FROM tags WHERE id=$1
`

func (q *Queries) GetTagById(ctx context.Context, id uuid.UUID) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagById, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getUserTags = `-- name: GetUserTags :many
SELECT id, name, user_id FROM tags WHERE user_id=$1
`

func (q *Queries) GetUserTags(ctx context.Context, userID uuid.UUID) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getUserTags, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
